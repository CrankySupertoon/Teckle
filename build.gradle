/*
 *    Copyright 2017 Benjamin K (darkevilmac)
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.3"
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven"


def branch
if (System.env.BRANCH_NAME) {
    // Jenkins support
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf('/') + 1)
} else {
    branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
}
def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()

version = branch + '-' + modVersion + '.' + commits + (dirty ? '-dirty' : '')
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	deploy
}

dependencies {
	deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
}


minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace("%TVER%", version)
}

repositories {
    mavenCentral()
    maven {
        url = "http://repo.elytradev.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        // MCMP maven.
        url "http://maven.amadornes.com/"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

dependencies {
    deobfCompile "com.elytradev:probedataproviderapi:${pdp_version}"
    testCompile group: "junit", name: "junit", version: "4.12"

    // JEI things.
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${mc_version}:${jei_version}"

    deobfCompile "MCMultiPart2:MCMultiPart-exp:${mcmp_version}"
	
	deobfCompile "com.elytradev:concrete:${concrete_version}:all"
    shadow "com.elytradev:concrete:${concrete_version}:all"
}

jar {
    classifier = "slim"
}

shadowJar {
    classifier = ""
    relocate "com.elytradev.concrete", "com.elytradev.teckle.repack.concrete"
    configurations = [project.configurations.shadow]
}

reobf {
    shadowJar { mappingType = "SEARGE" }
}

tasks.build.dependsOn reobfShadowJar


artifacts {
    archives shadowJar
}

if (file('private.gradle').exists()) {
	apply from: 'private.gradle'
}